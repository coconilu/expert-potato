---
description: 
globs: 
alwaysApply: false
---
# 功能开发指南

## 音频处理功能

### Whisper 语音识别集成
- 实现文件: [src/pages/extract_audio_page.py](mdc:src/pages/extract_audio_page.py)
- 使用 `faster-whisper` 库进行语音识别
- 模型自动下载到缓存目录
- 支持的音频格式: MP3, WAV, M4A, FLAC, AAC, OGG, WMA

### 音频角色分析功能
- 实现文件: [src/pages/audio_analysis_page.py](mdc:src/pages/audio_analysis_page.py)
- 支持音频文件中的说话人识别和分析
- 提供可视化的说话人卡片界面
- 集成项目管理功能

#### 功能特点
1. **说话人识别**
   - 自动分析音频中的不同说话人
   - 提供性别识别（男性/女性）
   - 计算每个说话人的总时长和片段数

2. **可视化界面**
   - 说话人卡片（SpeakerCard）展示
   - 使用 FlowLayout 自适应布局
   - 实时进度显示和状态反馈

3. **项目管理集成**
   - 使用 AudioProjectManager 管理分析项目
   - 自动保存分析结果到项目文件
   - 支持项目状态跟踪

4. **用户交互**
   - 支持拖拽文件选择
   - 一键重新分析功能
   - 友好的错误处理和提示

#### 说话人卡片组件
```python
class SpeakerCard(CardWidget):
    """说话人卡片组件"""
    clicked = pyqtSignal(str)  # 点击信号，传递说话人ID
    
    # 显示信息：
    # - 说话人标签和性别
    # - 总时长和片段数
    # - 试听和训练模型按钮
```

### 音频处理流程
1. **文件选择**
   - 支持拖拽和点击选择
   - 文件格式验证
   - 文件大小检查

2. **音频转文字**
   ```python
   # 使用 Whisper 模型
   model = WhisperModel("base", device="cpu")
   segments, info = model.transcribe(audio_file)
   ```

3. **音频分析**
   ```python
   # 音频分析页面使用示例
   analysis_page = AudioAnalysisPage()
   analysis_page.set_file_path(audio_file_path)
   analysis_page.show()
   ```

4. **进度反馈**
   - 使用 `QThread` 处理避免 UI 阻塞
   - 实时更新进度条
   - 显示处理状态信息

5. **结果展示**
   - 文本框显示识别结果
   - 支持一键复制功能
   - 错误信息友好提示

## 视频处理功能（待开发）
- 依赖配置: `[project.optional-dependencies.video]`
- 使用 `moviepy` 进行视频处理
- 使用 `yt-dlp` 下载在线视频

## 新功能开发模板

### 1. 创建新页面
```python
# src/pages/new_feature_page.py
from ui.base_page import BasePage
from config.core import Messages

class NewFeaturePage(BasePage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("NewFeaturePage")
        self._setupUi()
```

### 2. 添加导航项
在 [src/ui/navigation.py](mdc:src/ui/navigation.py) 中添加:
```python
self.addSubInterface(
    interface=NewFeaturePage(),
    icon=FluentIcon.ICON_NAME,
    text="新功能",
    position=NavigationItemPosition.TOP
)
```

### 3. 配置常量
在 [src/config/core.py](mdc:src/config/core.py) 中添加相关常量

## 在线音频提取
- 实现说明: [ONLINE_AUDIO_EXTRACTION.md](mdc:ONLINE_AUDIO_EXTRACTION.md)
- 支持从视频平台提取音频
- 使用 `yt-dlp` 库

## 性能优化
- 优化指南: [OPTIMIZATION_README.md](mdc:OPTIMIZATION_README.md)
- 使用多线程处理耗时操作
- 实现进度回调机制
- 合理的内存管理

## 错误处理规范
1. **用户友好的错误提示**
   ```python
   try:
       # 功能实现
   except Exception as e:
       MessageBox.critical(self, "错误", f"处理失败: {str(e)}")
   ```

2. **日志记录**
   - 使用 Python logging 模块
   - 记录详细错误信息
   - 保存到日志文件

3. **异常恢复**
   - 提供重试机制
   - 保存用户数据
   - 优雅降级处理

## 测试要求
- 为新功能编写单元测试
- 测试文件放在 `tests/` 目录
- 使用 `pytest` 框架
- 模拟 UI 交互使用 `pytest-qt`
